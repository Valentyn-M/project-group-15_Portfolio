{"version":3,"file":"index.js","sources":["../src/js/switch-theme.js"],"sourcesContent":["const htmlElement = document.documentElement;\nconst themeButton = document.querySelector('.switch-theme-test');\nthemeButton.addEventListener(\"click\", () => changeTheme(true));\n\n// Функция смены темы сайта (если функция вызывается по клику, то в аргументу функции будет true)\nfunction changeTheme(saveTheme = false) {\n\n\t// Меняем тему в любом случае\n\tlet currentTheme = htmlElement.classList.contains('_light') ? 'light' : 'dark';     \t// Заносим в переменную текущую тему HTML\n\tlet newTheme;                                                 \t\t\t\t\t\t\t\t\t\t\t\t// Переменная для смены класса в теге html\n\tlet newDataColorScheme;                                           \t\t\t\t\t\t\t\t\t\t// Переменная для смены атрибута \"data-color-scheme\" в теге html\n\tif (currentTheme === 'light') {\n\t\tnewTheme = 'dark';\n\t\tnewDataColorScheme = 'dark';\n\t} else {\n\t\tnewTheme = 'light';\n\t\tnewDataColorScheme = 'light';\n\t}\n\thtmlElement.classList.remove(`_${currentTheme}`);                         \t\t\t\t\t\t// Удаляем класс текущей темы для HTML\n\thtmlElement.classList.add(`_${newTheme}`);                              \t\t\t\t\t\t\t// Добавляем класс новой темы для HTML\n\tthemeButton.blur();                                             \t\t\t\t\t\t\t\t\t\t\t// Убираем фокус с кнопки\n\thtmlElement.setAttribute(\"data-color-scheme\", newDataColorScheme);              \t\t\t// Устанавливаем атрибут \"data-color-scheme\" для HTML\n\n\t// Если аргумент функции saveTheme = true (т.е. функция запущена по клику), то записываем в браузер в localStorage значение темы пользователя \n\tsaveTheme ? localStorage.setItem('theme', newTheme) : null;\n}\n\n// Основной код (Самовызываемая функция)\n(function () {\n\t// Получаем сохраненную тему из localStorage (theme - это ключ для хранения темы, выбранной пользователем)\n\t// Свойство localStorage позволяет получить доступ к Storage объекту. localStorage аналогично свойству sessionStorage. Разница только в том, что свойство sessionStorage хранит данные в течение сеанса (до закрытия браузера), в отличие от данных, находящихся в свойстве localStorage, которые не имеют ограничений по времени хранения и могут быть удалены только с помощью JavaScript.\n\t// При первом заходе на сайт эта константа будет пустой. Она заполняется в  функции смены темы changeTheme\n\tconst saveUserTheme = localStorage.getItem('theme');\n\n\t// Работа с системными настройками\n\tlet userTheme;\n\tif (window.matchMedia) {\n\t\t// Заносим в переменную userTheme цветовую тему Системы пользователя\n\t\tuserTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\t}\n\t// Ставим прослушку на Событие изменения темы (спрослушку ставим на темную тему)\n\twindow.matchMedia('(prefers-color-scheme: dark)').addEventListener(\"change\", e => {\n\t\t// Если выбранная пользователем тема отличается от сохраненной ранее темы (if (window.matchMedia('(prefers-color-scheme: dark)').matches != saveUserTheme), то запускаем функцию изменения темы changeTheme(), в противном случае ничего не дулаем (null)\n\t\t// Функция changeTheme() вызывается при смене Системных настроек темы, при условии, что нет сохораненных пользователем настроек темы на сайте\n\t\t!saveUserTheme ? changeTheme() : null;\n\t});\n\n\t// Функция установки темы при загрузкe страницы (Самовызываемая функция)\n\tfunction setThemeClass() {\n\t\tif (saveUserTheme) {                                      \t\t\t\t\t\t\t\t\t\t\t\t\t// Если пользователь ранее выбрал тему сайта (переменная saveUserTheme - не пустая)\n\t\t\thtmlElement.classList.add(`_${saveUserTheme}`);                 \t\t\t\t\t\t\t\t\t// Добавляем класс этой темы для HTML\n\t\t\thtmlElement.setAttribute(\"data-color-scheme\", saveUserTheme);       \t\t\t\t\t\t\t// Устанавливаем атрибут \"data-color-scheme\" для HTML\n\t\t} else {                                              \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Иначе\n\t\t\thtmlElement.classList.add(`_${userTheme}`);                   \t\t\t\t\t\t\t\t\t\t// Добавляем класс Системной темы для HTML\n\t\t\thtmlElement.setAttribute(\"data-color-scheme\", userTheme);         \t\t\t\t\t\t\t\t// Устанавливаем атрибут \"data-color-scheme\" для HTML из системы пользователя\n\t\t}\n\t}\n\tsetThemeClass();\n\n}());\n"],"names":["htmlElement","themeButton","changeTheme","saveTheme","currentTheme","newTheme","newDataColorScheme","saveUserTheme","userTheme","e","setThemeClass"],"mappings":"ssBAAA,MAAMA,EAAc,SAAS,gBACvBC,EAAc,SAAS,cAAc,oBAAoB,EAC/DA,EAAY,iBAAiB,QAAS,IAAMC,EAAY,EAAI,CAAC,EAG7D,SAASA,EAAYC,EAAY,GAAO,CAGvC,IAAIC,EAAeJ,EAAY,UAAU,SAAS,QAAQ,EAAI,QAAU,OACpEK,EACAC,EACAF,IAAiB,SACpBC,EAAW,OACXC,EAAqB,SAErBD,EAAW,QACXC,EAAqB,SAEtBN,EAAY,UAAU,OAAO,IAAII,CAAY,EAAE,EAC/CJ,EAAY,UAAU,IAAI,IAAIK,CAAQ,EAAE,EACxCJ,EAAY,KAAI,EAChBD,EAAY,aAAa,oBAAqBM,CAAkB,EAGhEH,GAAY,aAAa,QAAQ,QAASE,CAAQ,CACnD,EAGC,UAAY,CAIZ,MAAME,EAAgB,aAAa,QAAQ,OAAO,EAGlD,IAAIC,EACA,OAAO,aAEVA,EAAY,OAAO,WAAW,8BAA8B,EAAE,QAAU,OAAS,SAGlF,OAAO,WAAW,8BAA8B,EAAE,iBAAiB,SAAUC,GAAK,CAGhFF,GAAgBL,EAAa,CAChC,CAAE,EAGD,SAASQ,GAAgB,CACpBH,GACHP,EAAY,UAAU,IAAI,IAAIO,CAAa,EAAE,EAC7CP,EAAY,aAAa,oBAAqBO,CAAa,IAE3DP,EAAY,UAAU,IAAI,IAAIQ,CAAS,EAAE,EACzCR,EAAY,aAAa,oBAAqBQ,CAAS,EAExD,CACDE,GAED,GAAG"}